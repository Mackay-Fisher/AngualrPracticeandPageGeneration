{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction TodoComponent_p_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Click to Load\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TodoComponent_table_8_tr_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const Todo_r9 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(Todo_r9.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(Todo_r9.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(Todo_r9.isComplete);\n  }\n}\nfunction TodoComponent_table_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 17)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"ID\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Complete\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"tbody\");\n    i0.ɵɵtemplate(10, TodoComponent_table_8_tr_10_Template, 7, 3, \"tr\", 18);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.TodoList);\n  }\n}\nexport class TodoComponent {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.TodoList = [];\n    this.currentCount = 0;\n    this.currentItem = {};\n    this.ItemId = '';\n    for (let i = 0; i < 25; i++) {\n      let bool = true;\n      if (i % 2 == 0) {\n        bool = false;\n      }\n      let newTodo = {\n        id: Number(i),\n        name: `Task${i}`,\n        isComplete: Boolean(bool)\n      };\n      this.http.post(`https://localhost:7253/api/TodoItems`, newTodo).subscribe(res => {\n        console.log(res);\n      }), error => console.error(error);\n    }\n  }\n  getAllTasks() {\n    this.http.get('https://localhost:7253/api/TodoItems').subscribe(res => {\n      console.log(\"button pressed\");\n      console.log(res);\n      this.TodoList = res;\n    }), error => console.error(error);\n  }\n  getOneTask(id) {\n    if (isNaN(Number(id))) {\n      console.log(\"invalid input\");\n      return;\n    }\n    this.http.get(`https://localhost:7253/api/TodoItems/${id}`).subscribe(res => {\n      this.currentItem = res;\n    }), error => console.error(error);\n  }\n  UpdateTodo(todoitem, id) {\n    if (isNaN(Number(id))) {\n      console.log(\"invalid input\");\n      return;\n    }\n    console.log(todoitem);\n    return this.http.put(`https://localhost:7253/api/TodoItems/${id}`, todoitem).subscribe(res => {\n      console.log(res);\n    }), error => console.error(error);\n  }\n  PostTest(id, name, bool) {\n    let todo = Todo(id, name, bool);\n    return this.http.post(`https://localhost:7253/api/TodoItems`, todo).subscribe(res => {\n      console.log(res);\n    }), error => console.error(error);\n  }\n  DeleteItem(todo, id) {\n    return this.http.delete(`https://localhost:7253/api/TodoItems/${id}`);\n  }\n}\nTodoComponent.ɵfac = function TodoComponent_Factory(t) {\n  return new (t || TodoComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nTodoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TodoComponent,\n  selectors: [[\"app-counter-component\"]],\n  decls: 39,\n  vars: 6,\n  consts: [[1, \"request-container\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [4, \"ngIf\"], [\"class\", \"table table-striped\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"type\", \"text\", \"placeholder\", \"Enter item ID\", 3, \"ngModel\", \"ngModelChange\"], [\"inputValue\", \"\"], [\"aria-live\", \"polite\"], [\"type\", \"text\", \"placeholder\", \"Request in format:{Id:num, Name:string, IsComplete: bool}\", \"rows\", \"4\", \"cols\", \"20\"], [\"inputtext\", \"\"], [\"type\", \"text\", \"placeholder\", \"Enter item ID\"], [\"inputUpdate\", \"\"], [1, \"btn\", \"btn-primary\", \"a\", 3, \"click\"], [\"inputPostId\", \"\"], [\"type\", \"text\", \"placeholder\", \"Enter Name\"], [\"inputPostName\", \"\"], [\"type\", \"text\", \"placeholder\", \"Enter Bool\"], [\"inputPostBool\", \"\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function TodoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r10 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"To Do List\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"div\", 0);\n      i0.ɵɵelementStart(3, \"p\");\n      i0.ɵɵtext(4, \"This is a simple example of an Angular component.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function TodoComponent_Template_button_click_5_listener() {\n        return ctx.getAllTasks();\n      });\n      i0.ɵɵtext(6, \"Get All\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, TodoComponent_p_7_Template, 3, 0, \"p\", 2);\n      i0.ɵɵtemplate(8, TodoComponent_table_8_Template, 11, 1, \"table\", 3);\n      i0.ɵɵelementStart(9, \"input\", 4, 5);\n      i0.ɵɵlistener(\"ngModelChange\", function TodoComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.ItemId = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵelementStart(12, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function TodoComponent_Template_button_click_12_listener() {\n        i0.ɵɵrestoreView(_r10);\n        const _r2 = i0.ɵɵreference(10);\n        return i0.ɵɵresetView(ctx.getOneTask(_r2.value));\n      });\n      i0.ɵɵtext(13, \"Get Id Task\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"p\", 6);\n      i0.ɵɵtext(15, \"Current Item: \");\n      i0.ɵɵelementStart(16, \"strong\");\n      i0.ɵɵtext(17);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(18, \"textarea\", 7, 8)(20, \"br\")(21, \"input\", 9, 10)(23, \"br\");\n      i0.ɵɵelementStart(24, \"button\", 11);\n      i0.ɵɵlistener(\"click\", function TodoComponent_Template_button_click_24_listener() {\n        i0.ɵɵrestoreView(_r10);\n        const _r3 = i0.ɵɵreference(19);\n        const _r4 = i0.ɵɵreference(22);\n        return i0.ɵɵresetView(ctx.UpdateTodo(_r3.value, _r4.value));\n      });\n      i0.ɵɵtext(25, \"Put Id Item\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(26, \"br\")(27, \"br\")(28, \"input\", 9, 12)(30, \"br\")(31, \"input\", 13, 14)(33, \"br\")(34, \"input\", 15, 16)(36, \"br\");\n      i0.ɵɵelementStart(37, \"button\", 11);\n      i0.ɵɵlistener(\"click\", function TodoComponent_Template_button_click_37_listener() {\n        i0.ɵɵrestoreView(_r10);\n        const _r5 = i0.ɵɵreference(29);\n        const _r6 = i0.ɵɵreference(32);\n        const _r7 = i0.ɵɵreference(35);\n        return i0.ɵɵresetView(ctx.PostTest(_r5.value, _r6.value, _r7.value));\n      });\n      i0.ɵɵtext(38, \"PostItem\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.TodoList == null ? null : ctx.TodoList.length));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.TodoList.length);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngModel\", ctx.ItemId);\n      i0.ɵɵadvance(8);\n      i0.ɵɵtextInterpolate3(\"\", ctx.currentItem.id, \" \", ctx.currentItem.name, \" \", ctx.currentItem.isComplete, \"\");\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  encapsulation: 2\n});\nTodoComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoComponent,\n  factory: TodoComponent.ɵfac,\n  providedIn: 'root'\n});\nfunction Todo(id, nam, bool) {\n  if (isNaN(Number(id))) {\n    console.log(\"invalid input\");\n    return;\n  }\n  let newTodo = {\n    id: Number(id),\n    name: nam,\n    isComplete: Boolean(bool)\n  };\n  return newTodo;\n}","map":{"version":3,"mappings":"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","names":["i0","TodoComponent","constructor","http","baseUrl","i","bool","newTodo","id","Number","name","isComplete","Boolean","post","subscribe","res","console","log","error","getAllTasks","get","TodoList","getOneTask","isNaN","currentItem","UpdateTodo","todoitem","put","PostTest","todo","Todo","DeleteItem","delete","selectors","decls","vars","consts","template","ctx","factory","providedIn","nam"],"sourceRoot":"","sources":["/Users/mackayfisher/Desktop/APIver/AngularApi/ClientApp/src/app/counter/counter.component.html","/Users/mackayfisher/Desktop/APIver/AngularApi/ClientApp/src/app/counter/Todo.component.ts"],"sourcesContent":["<h1>To Do List</h1>\r\n\r\n<div class=\"request-container\">\r\n\r\n</div>\r\n<p>This is a simple example of an Angular component.</p>\r\n\r\n<button class=\"btn btn-primary\" (click)=\"getAllTasks()\">Get All</button>\r\n\r\n<p *ngIf=\"!TodoList?.length\"><em>Click to Load</em></p>\r\n\r\n<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"TodoList.length\">\r\n  <thead>\r\n    <tr>\r\n      <th>ID</th>\r\n      <th>Name</th>\r\n      <th>Complete</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let Todo of TodoList\">\r\n      <td>{{ Todo.id }}</td>\r\n      <td>{{ Todo.name }}</td>\r\n      <td>{{ Todo.isComplete }}</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<input type=\"text\" [(ngModel)]=\"ItemId\" placeholder=\"Enter item ID\" #inputValue>\r\n<br>\r\n<button class=\"btn btn-primary\" (click)=\"getOneTask(inputValue.value)\">Get Id Task</button>\r\n\r\n<p aria-live=\"polite\">Current Item: <strong>{{ currentItem.id}} {{currentItem.name}} {{currentItem.isComplete }}</strong></p> \r\n\r\n<textarea type=\"text\" placeholder=\"Request in format:{Id:num, Name:string, IsComplete: bool}\" #inputtext rows=\"4\" cols=\"20\"></textarea>\r\n<br>\r\n<input type=\"text\" placeholder=\"Enter item ID\" #inputUpdate>\r\n<br>\r\n<button class=\"btn btn-primary a\" (click)=\"UpdateTodo(inputtext.value,inputUpdate.value)\">Put Id Item</button>\r\n<br>\r\n<br>\r\n<input type=\"text\"  placeholder=\"Enter item ID\" #inputPostId>\r\n<br>\r\n<input type=\"text\"  placeholder=\"Enter Name\" #inputPostName>\r\n<br>\r\n<input type=\"text\"  placeholder=\"Enter Bool\" #inputPostBool>\r\n<br>\r\n<button class=\"btn btn-primary a\" (click)=\"PostTest(inputPostId.value,inputPostName.value,inputPostBool.value)\">PostItem</button>","import { Component, Inject} from '@angular/core';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n@Component({\r\n  selector: 'app-counter-component',\r\n  templateUrl: './counter.component.html'\r\n})\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class TodoComponent {\r\n  public TodoList: TodoItem[] = [];\r\n  public currentCount = 0;\r\n  public currentItem :TodoItem = {} as TodoItem;\r\n  public ItemId: string = '';\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) {\r\n    for(let i = 0; i<25; i++){\r\n        let bool = true;\r\n        if(i%2==0){\r\n          bool = false;\r\n        }\r\n        let newTodo = {id: Number(i), name: `Task${i}`, isComplete: Boolean(bool)};\r\n        this.http.post<TodoItem>(`https://localhost:7253/api/TodoItems`,newTodo).subscribe(res =>{\r\n          console.log(res)\r\n        }), (error: any) => console.error(error);\r\n    }\r\n  }\r\n\r\n  getAllTasks(){\r\n    this.http.get<TodoItem[]>('https://localhost:7253/api/TodoItems').subscribe(res =>{\r\n      console.log(\"button pressed\")\r\n      console.log(res);\r\n      this.TodoList = res;\r\n    }), (error: any) => console.error(error);\r\n  }\r\n\r\n  getOneTask(id:string){\r\n    if(isNaN(Number(id))){\r\n      console.log(\"invalid input\");\r\n      return;\r\n    }\r\n    this.http.get<TodoItem>(`https://localhost:7253/api/TodoItems/${id}`).subscribe(res =>{\r\n      this.currentItem = res;\r\n    }), (error: any) => console.error(error);\r\n  }\r\n\r\n  UpdateTodo(todoitem:string, id:string){\r\n    if(isNaN(Number(id))){\r\n      console.log(\"invalid input\");\r\n      return;\r\n    }\r\n    console.log(todoitem);\r\n    return this.http.put<TodoItem>(`https://localhost:7253/api/TodoItems/${id}`,todoitem).subscribe(res =>{\r\n      console.log(res)\r\n    }), (error: any) => console.error(error);\r\n  }\r\n\r\n  PostTest(id:string,name:string,bool:string){\r\n\r\n    \r\n    let todo = Todo(id,name,bool);\r\n\r\n    return this.http.post<TodoItem>(`https://localhost:7253/api/TodoItems`,todo).subscribe(res =>{\r\n      console.log(res)\r\n    }), (error: any) => console.error(error);\r\n  }\r\n  \r\n  DeleteItem(todo:TodoItem, id:number){\r\n    return this.http.delete<TodoItem>(`https://localhost:7253/api/TodoItems/${id}`)\r\n  }\r\n}\r\n\r\n\r\ninterface TodoItem {\r\n  id: number;\r\n  name: string;\r\n  isComplete: boolean;\r\n}\r\n\r\nfunction Todo(id:string,nam:string,bool:string){\r\n  if(isNaN(Number(id))){\r\n    console.log(\"invalid input\");\r\n    return;\r\n  }\r\n  let newTodo = {id: Number(id), name: nam, isComplete: Boolean(bool)};\r\n\r\n  return newTodo\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}